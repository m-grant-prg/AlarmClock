---------------------------------
Java Swing AlarmClock Application
=================================

Author - Copyright (C) 2012-2019 Mark Grant

Contents
========

1 ... Project Description

2 ... This Repository

3 ... Project Structure

4 ... Installation

	A) Just using the built jar file.
	B) For systems supporting AutoTools.
	C) Of Distro-Native Package
	D) Windows msi installer.

5 ... Utility Scripts


-------------------------

1 ... Project Description
=========================

This is a GUI AlarmClock application implementing two independent alarms. Each
alarm can be set to 'Alarm At', eg 13:15, or 'Alarm In', eg 1 hour 10 mins.
Each alarm also incorporates a 'Snooze' button that will pause a ringing alarm
for 5 minutes.


---------------------

2 ... This Repository
=====================

AlarmClock is written in Java using NetBeans as an IDE. The project must be
maintained via NetBeans to preserve it's support files, (*.form, build.xml,
etc) which are tracked in git. The repository is also configured for Autotools.
The AutoTools files exist in parallel to the NetBeans files and do not conflict.


-----------------------
3 ... Project Structure
=======================

The NetBeans part of the project is expected to be used for development only.
Once development is complete AutoTools takes over to provide basic build and
packaging which downstream can be turned into debian, rpm etc packages.
AutoTools will build an end-user application consisting of:-

	The main application jar file.
	A bash start-up script.
	A manual page for the start-up script.
	A desktop file for a GUI start-up of the application. (It invokes the
	bash script).


------------------

4 ... Installation
==================

As a Java application it can run on many operating systems.

A) Using a jar
--------------
The easiest way to use a jar file is to compile and build within NetBeans. This
produces the application in the dist subdirectory. The application can then be
run using:-

	java -jar "dist/AlarmClock.jar"
		with the path modified as necessary.
N.B. If you wish to move the application to another location you *must* move the
relative subdirectory 'lib' with it. i.e. the jar and the lib directory must
maintain their relative relationship.

B)  AutoTools (configure and make) Installation
-----------------------------------------------
1 ... Download either the source or distribution tarball (the .tar.gz file)
	from:-

https://github.com/m-grant-prg/alarmclock-java/releases

2 ... Extract the tarball preserving the directory structure.

3 ... cd to the directory created.

4 ... If you downloaded the source tarball type 'autoreconf -if'

5 ... Type './configure --enable-atonly=yes'

6 ... As root or sudo, type 'make install clean'

(Quote marks are for textual clarity only).


To uninstall the package:

1 ... cd to the directory created in the above install process.

2 ... As root or sudo, type 'make uninstall clean'

C) Installation of Distro-Native Package
----------------------------------------
Installation packages native to different distributions are available, please
refer to the relevant installation section on the wiki at:-

https://github.com/m-grant-prg/alarmclock-java/wiki

D) Windows installation
-----------------------
Another associated GitHub repository AlarmClockWindowsDist is available. This
repository provides the mechanism to produce a Windows msi installer package.


---------------------
5 ... Utility Scripts
=====================
In the project root directory there is 1 helper script; bootstrap.sh.

bootstrap.sh
------------
This misleadingly named script bootstraps the project build and provides other
useful features. The main options are probably b, c, C, D and T.

In AutoTools it is usually advisable to perform parallel builds. This means you
build somewhere other than the project root. This is because building creates
files and they would confuse the project root downwards. I always create a build
directory straight off the project root, cd to there and do all build and git
work from there, (.gitignore is already set to ignore such a directory).

Assuming you adopt the preceding paragraph then a typical invocation of the
script would be:-

../bootstrap.sh --config --build ..

The last '..' points the way to project root.

For the full list of arguments to bootstrap.sh, please refer to the options
section of the acmbuild wiki, the options are identical:-

https://github.com/m-grant-prg/acmbuild/wiki

